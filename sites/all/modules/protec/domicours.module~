<?php


/**
 * Implements hook_permission().
 *
 * @todo Change sort order where required: http://drupal.org/node/224333#sorting_permissions
 */
/*function domicours_permission() {
  return array(

    'send to keleen' => array(
      'title' => t('Send to keleen'),
    ),
  );
}*/

/**
 * Implements hook_init().
 *
 * @todo move this to a specific form theme function ?
 */
/*function domicours_init() {
  //drupal_add_css(drupal_get_path('module', 'simplenews') . '/simplenews.css', array('every_page' => TRUE));
}*/

/**
 * Implements hook_menu().
 */






/**
 * Implements hook_node_type_delete().
 */
function domicours_node_type_delete($info) {
  //drupal_static_reset('simplenews_get_content_types');
}




/**
 * Implements hook_node_view().
 */
function domicours_node_view($node, $view_mode) {
  
  

}

/**
 * Get simplenews category term values from a node object.
 *
 * @ingroup issue
 */
function domicours_get_term_values($node) {
 
 
}

/**
 * Implements hook_node_validate().
 */
function domicours_node_validate($node, $form) {
  if (!domicours_check_node_types($node->type)) {
    return;
  }
  
  
}

/**
 * Implements hook_node_presave().
 */
function domicours_node_presave($node) {
  
}

/**
 * Implements hook_node_insert().
 */
function domicours_node_insert($node) {
		
}



/**
 * Implements hook_node_update().
 */
function domicours_node_update($node) {
  if (!domicours_check_node_types($node->type)) {
    return;
  }

  
  
}

/**
 * Implements hook_node_delete().
 */
function domicours_node_delete($node) {
  if (!domicours_check_node_types($node->type)) {
    return;
  }
  
  
//  drupal_set_message(t('Newsletter %title was deleted.', array('%title' => $node->title)));
}

/**
 * Implements hook_node_load().
 */
function domicours_node_load($nodes, $types) {
  // We only support Simplenews enabled content types.
  if (!domicours_check_node_types($types)) {
    return;
  }

 
 
}

/**
 * Check if content type(s) is enabled for use as Simplenews newsletter.
 *
 * @param $types
 *   Array of content types or single content type string.
 * @return boolean
 *   TRUE if at least one of $types is enabled for Simplenews.
 *
 * @ingroup issue
 */
function domicours_check_node_types($types) {
	return true;  
  
  
}

/**
 * Get all node types supported by Simplenews.
 *
 * @return
 *   Array of node-types which can be used a simplenews newsletter issue.
 *
 * @ingroup issue
 */
function domicours_get_content_types() {
  
}

/**
 * Add the taxonomy term field for the newsletter category.
 *
 * @param $type
 *   A node type object.
 *
 * @ingroup issue
 */
function domicours_add_term_field($type) {
 
 
}




/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add checkbox to the content type form to use the content type as newsletter.
 */
function domicours_form_node_type_form_alter(&$form, $form_state) {
  
  
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a warning message to taxonomy term delete form.
 */
function domicours_form_taxonomy_form_term_alter(&$form, $form_state) {
  
  
}



/**
 * Implements hook_form_alter().
 */
function domicours_form_webform_client_form_1_alter(&$form, &$form_state, $form_id) {
  
  $form['actions']['submit']['#submit'][] = 'domicours_form_submit';
}


function domicours_form_submit($form) {
	$fields=_domicours_form_validate_fields($form);
	foreach($form["submitted"] as $key=>$val) {
		if(in_array($key,$fields)) echo $key."<br>";
	}
	
	exit;
}
 
 
function _domicours_form_validate_fields($form) {
	
	$component=$form["#node"]->webform["components"];
	$fields=array();
	foreach($component as $val)
		$fields[]=$val["form_key"];
		
	return $fields;
	
	
} 


/**
 * @todo
 */
function _domicours_node_form(&$form, $form_state) {


}



/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add simplenews subscription fields to user register form.
 * @todo mode this function to another place in the module.
 */
function domicours_form_user_register_form_alter(&$form, &$form_state) {
  $options = $default_value = $hidden = array();

 
 
}

/**
 * Implements hook_user_insert().
 *
 * Update uid and preferred language when the new account was already subscribed.
 */
function domicours_user_insert(&$edit, $account, $category) {
 
 
}

/**
 * Implements hook_user_login().
 *
 * Subscribe user to a newsletter as per registration form.
 */
function domicours_user_login(&$edit, $account) {
 
 
}

/**
 * Implements hook_user_presave().
 *
 * User data (mail, status, language) is synchronized with subscriber.
 * This function handles existing user account, simplenews_user_insert takes
 * care of new accounts.
 * @see simplenews_user_insert()
 */
function domicours_user_presave(&$edit, $account, $category) {
  switch ($category) {
    case 'account':
     
     
      break;
  }
}

/**
 * Implements hook_user_cancel().
 */
function domicours_user_cancel($edit, $account, $method) {
  // Deactivate subscriber when account is disabled via cancel user.

 
 
}

/**
 * Implements hook_user_delete().
 */
function domicours_user_delete($account) {
 
 
}

/**
 * Implements hook_user_categories().
 */
function domicours_user_categories() {
  
  
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add simplenews subscription management form to account category 'Newsletters'
 */
function domicours_form_user_profile_form_alter(&$form, &$form_state) {
  
  
}

/**
 * Implements hook_user_view().
 */
function domicours_user_view($account, $build_mode) {
  global $user;
 
 
}

/**
 * Implements hook_block_info().
 */
function domicours_block_info() {
  $blocks = array();

  
  
}

/**
 * Implements hook_block_configure().
 */
function domicours_block_configure($delta = '') {
 
 
}

/**
 * Implements hook_block_save().
 */
function domicours_block_save($delta = '', $edit = array()) {
 
 
}

/**
 * Implements hook_block_view().
 */
function domicours_block_view($delta = '') {
 
 
}

/**
 * Implements hook_forms().
 *
 * All form blocks are build using simplenews_block_form().
 * hook_forms() is required to provide unique form id for each block form.
 */
function domicours_forms($form_id, $args) {
  
  
}

/**
 * Load a user or creates a dummy anonymous user.
 *
 * @return
 *   A user object if a user with that mail address exists, otherwise an object
 *   with the properties mail and uid (set to 0).
 *
 * @ingroup subscriber
 */
function domicours_load_user_by_mail($mail) {
  
  
}





/**
 * Implements hook_help().
 *
 * @todo Rewrite help text to match the new terminology, the new data architecture, the new admin pages, the news node-form interface.
 */
function domicours_help($path, $arg) {
  
  
}



/**
 * Generate the hash key used for subscribe/unsubscribe link.
 */
function domicours_generate_hash($mail, $snid, $tid) {
  //return drupal_substr(md5($mail . simplenews_private_key()), 0, 10) . $snid . 't' . $tid;
}


/**
 * Implements hook_variable_info().
 */
function domicours_variable_info($options) {
 
 
}






